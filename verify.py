#!/usr/bin/env python3
"""
Script de verificaci√≥n del sistema Empathy
Valida que todos los componentes est√©n funcionando correctamente
"""

import sys
import os
from pathlib import Path

# A√±adir src al path
sys.path.append(str(Path(__file__).parent / 'src'))

try:
    from __version__ import get_version_info, print_version_info, __version__
    from main import EmpathyAnalyzer
    from analysis.sentiment_analyzer import SentimentAnalyzer
    from analysis.collaboration_analyzer import CollaborationAnalyzer
    from data_collection.github_collector import GitHubCollector
    from visualization.dashboard import Dashboard
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    sys.exit(1)

def check_system_health():
    """Verifica el estado de salud del sistema"""
    print("üîç VERIFICACI√ìN DEL SISTEMA EMPATHY")
    print("=" * 50)
    
    # Verificar versi√≥n
    print(f"üì¶ Versi√≥n: {__version__}")
    version_info = get_version_info()
    print(f"üè∑Ô∏è  Release: {version_info['release_name']}")
    print(f"üìÖ Fecha: {version_info['release_date']}")
    print(f"üöÄ Estado: {version_info['status']}")
    print()
    
    # Verificar componentes
    print("üß© COMPONENTES:")
    components = [
        ("Analizador de Sentimientos", SentimentAnalyzer),
        ("Analizador de Colaboraci√≥n", CollaborationAnalyzer),
        ("Collector de GitHub", GitHubCollector),
        ("Dashboard Web", Dashboard),
        ("Analizador Principal", EmpathyAnalyzer)
    ]
    
    all_ok = True
    for name, component in components:
        try:
            # Intentar instanciar
            if component == Dashboard:
                instance = component()
            elif component == SentimentAnalyzer:
                instance = component()
            elif component == CollaborationAnalyzer:
                instance = component()
            elif component == GitHubCollector:
                instance = component("")  # Token vac√≠o para test
            elif component == EmpathyAnalyzer:
                instance = component({})  # Config vac√≠o para test
            
            print(f"  ‚úÖ {name}")
        except Exception as e:
            print(f"  ‚ùå {name}: {e}")
            all_ok = False
    
    print()
    
    # Verificar archivos clave
    print("üìÅ ARCHIVOS CLAVE:")
    key_files = [
        "src/__version__.py",
        "src/__init__.py", 
        "setup.py",
        "requirements.txt",
        "demo.py",
        "CHANGELOG.md",
        "presentation/README.md"
    ]
    
    for file_path in key_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} (faltante)")
            all_ok = False
    
    print()
    
    # Verificar caracter√≠sticas
    print("üåü CARACTER√çSTICAS:")
    features = version_info['features']
    for feature in features:
        print(f"  ‚úÖ {feature}")
    
    print()
    
    # Resultado final
    if all_ok:
        print("üéâ SISTEMA COMPLETAMENTE FUNCIONAL")
        print("‚úÖ Todos los componentes est√°n operativos")
        print("üöÄ Listo para producci√≥n y demos")
        return True
    else:
        print("‚ö†Ô∏è  SISTEMA CON PROBLEMAS")
        print("‚ùå Algunos componentes requieren atenci√≥n")
        return False

def run_quick_demo():
    """Ejecuta una demo r√°pida para verificar funcionalidad"""
    print("\nüß™ DEMO R√ÅPIDA DE VERIFICACI√ìN")
    print("=" * 50)
    
    try:
        # Test b√°sico del analizador
        analyzer = EmpathyAnalyzer({})
        print("‚úÖ Analizador principal: OK")
        
        # Test del analizador de sentimientos
        sentiment_analyzer = SentimentAnalyzer()
        test_text = "This is a great project!"
        sentiment = sentiment_analyzer.analyze_text(test_text)
        print(f"‚úÖ An√°lisis de sentimientos: {sentiment['compound']:.2f}")
        
        # Test del analizador de colaboraci√≥n
        collab_analyzer = CollaborationAnalyzer()
        print("‚úÖ Analizador de colaboraci√≥n: OK")
        
        print("\nüéØ VERIFICACI√ìN COMPLETADA EXITOSAMENTE")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demo r√°pida: {e}")
        return False

if __name__ == "__main__":
    print_version_info()
    print()
    
    # Verificar sistema
    system_ok = check_system_health()
    
    if system_ok:
        # Ejecutar demo r√°pida
        demo_ok = run_quick_demo()
        
        if demo_ok:
            print(f"\nüèÜ EMPATHY v{__version__} EST√Å 100% FUNCIONAL")
            sys.exit(0)
        else:
            print(f"\n‚ö†Ô∏è  EMPATHY v{__version__} tiene problemas en demo")
            sys.exit(1)
    else:
        print(f"\n‚ùå EMPATHY v{__version__} tiene problemas de sistema")
        sys.exit(1)